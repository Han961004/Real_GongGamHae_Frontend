{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\Real_GongGamHae_Frontend-Joonsik\\\\Real_GongGamHae_Frontend-Joonsik\\\\my-app\\\\src\\\\pages\\\\PostPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { useAuth } from '../components/Auth/AuthContext';\nimport Header from '../components/common/Header';\nimport '../css/PostPage.css'; // CSS 파일 가져오기\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PostPage = () => {\n  _s();\n  const {\n    id\n  } = useParams(); // 'category' 대신 'id'만 사용\n  const {\n    isLogin,\n    userId,\n    userCategory\n  } = useAuth();\n  const navigate = useNavigate();\n  const [post, setPost] = useState(null);\n  const [comment, setComment] = useState('');\n  const [comments, setComments] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [editingCommentId, setEditingCommentId] = useState(null);\n  const [editingCommentContent, setEditingCommentContent] = useState('');\n  const [warning, setWarning] = useState('');\n\n  // 최포 포스트 불러오기\n  useEffect(() => {\n    const fetchPostAndComments = async () => {\n      try {\n        setLoading(true);\n        console.log(userCategory);\n        console.log(userId);\n        let postEndpoint = '';\n        if (userCategory === '자유게시판') {\n          postEndpoint = `http://localhost:8080/api/jayuposts/${id}`;\n        } else if (userCategory === '공감게시판') {\n          postEndpoint = `http://localhost:8080/api/gonggamposts/${id}`;\n        } else if (userCategory === 'bestposts') {\n          postEndpoint = `http://localhost:8080/api/bestposts/${id}`;\n        } else {\n          throw new Error(`Invalid category: ${userCategory}`);\n        }\n        const postResponse = await fetch(postEndpoint);\n        if (!postResponse.ok) {\n          throw new Error('Failed to fetch post');\n        }\n        const postData = await postResponse.json();\n        setPost(postData);\n        setComments(postData.comments);\n      } catch (error) {\n        console.error('Error fetching post and comments:', error);\n        setError(error.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchPostAndComments();\n  }, [id, userCategory]);\n\n  // 댓글 작성\n  const handleAddComment = async () => {\n    if (!comment) {\n      setError('댓글 내용을 입력해주세요.');\n      return;\n    }\n    try {\n      let commentsEndpoint = '';\n      if (userCategory === '자유게시판') {\n        commentsEndpoint = `http://localhost:8080/api/jayucomments/${id}`;\n      } else if (userCategory === '공감게시판') {\n        commentsEndpoint = `http://localhost:8080/api/gonggamcomments/${id}`;\n      } else if (userCategory === 'bestposts') {\n        commentsEndpoint = `http://localhost:8080/api/bestcomments/${id}`;\n      } else {\n        throw new Error(`Invalid category: ${userCategory}`);\n      }\n      const response = await fetch(commentsEndpoint, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          content: comment\n        }),\n        credentials: 'include'\n      });\n      if (!response.ok) {\n        alert(\"권한이 없습니다.\");\n        return;\n      }\n      const newComment = await response.json();\n      setComments([...comments, newComment]);\n      setComment('');\n    } catch (error) {\n      console.error('Error adding comment:', error);\n      setError(error.message);\n    }\n  };\n  const handleUpdateComment = async commentId => {\n    if (!editingCommentContent) {\n      setError('댓글 내용을 입력해주세요.');\n      return;\n    }\n    try {\n      let updateEndpoint = '';\n      if (userCategory === '자유게시판') {\n        updateEndpoint = `http://localhost:8080/api/jayucomments/${id}/${commentId}`;\n      } else if (userCategory === '공감게시판') {\n        updateEndpoint = `http://localhost:8080/api/gonggamcomments/${id}/${commentId}`;\n      } else if (userCategory === 'bestposts') {\n        updateEndpoint = `http://localhost:8080/api/bestcomments/${id}/${commentId}`;\n      } else {\n        throw new Error(`Invalid category: ${userCategory}`);\n      }\n      const response = await fetch(updateEndpoint, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          content: editingCommentContent\n        }),\n        credentials: 'include'\n      });\n      if (!response.ok) {\n        alert(\"권한이 없습니다.\");\n        return;\n      }\n      const updatedComment = await response.json();\n      setComments(comments.map(c => c.id === commentId ? updatedComment : c));\n      setEditingCommentId(null);\n      setEditingCommentContent('');\n    } catch (error) {\n      console.error('Error updating comment:', error);\n      setError(error.message);\n    }\n  };\n  const handleDeleteComment = async commentId => {\n    try {\n      let deleteEndpoint = '';\n      if (userCategory === '자유게시판') {\n        deleteEndpoint = `http://localhost:8080/api/jayucomments/${id}/${commentId}`;\n      } else if (userCategory === '공감게시판') {\n        deleteEndpoint = `http://localhost:8080/api/gonggamcomments/${id}/${commentId}`;\n      } else if (userCategory === 'bestposts') {\n        deleteEndpoint = `http://localhost:8080/api/bestcomments/${id}/${commentId}`;\n      } else {\n        throw new Error(`Invalid category: ${userCategory}`);\n      }\n      const response = await fetch(deleteEndpoint, {\n        method: 'DELETE',\n        credentials: 'include'\n      });\n      if (!response.ok) {\n        alert(\"권한이 없습니다.\");\n        return;\n      }\n      setComments(comments.filter(c => c.id !== commentId));\n    } catch (error) {\n      console.error('Error deleting comment:', error);\n      setError(error.message);\n    }\n  };\n\n  // 포스트 수정\n  const handleUpdatePost = async () => {\n    try {\n      let editEndpoint = '';\n      if (userCategory === '자유게시판') {\n        editEndpoint = `http://localhost:8080/api/jayuposts/${id}`;\n      } else if (userCategory === '공감게시판') {\n        editEndpoint = `http://localhost:8080/api/gonggamposts/${id}`;\n      } else if (userCategory === 'BEST') {\n        editEndpoint = `/api/bestposts/${id}`;\n      } else {\n        console.error('Invalid category:', userCategory);\n        return;\n      }\n      const response = await fetch(editEndpoint, {\n        method: 'GET',\n        credentials: 'include',\n        headers: {\n          'Accept': 'application/json'\n        }\n      });\n      if (!response.ok) {\n        throw new Error('Failed to fetch post for verification');\n      }\n      console.log(editEndpoint);\n      const postData = await response.json();\n      console.log(postData);\n      console.log(userId);\n\n      // Check if the logged-in user is the author\n      if (postData.userInfo.userAccount !== userId) {\n        alert(\"수정 권한이 없습니다.\");\n        return;\n      }\n\n      // Navigate to the edit page\n      if (userCategory === '자유게시판') {\n        navigate(`/postWritePage/jayupost/${id}`);\n      } else if (userCategory === '공감게시판') {\n        navigate(`/postWritePage/gonggampost/${id}`);\n      } else if (userCategory === 'BEST') {\n        editEndpoint = `/api/bestposts/${id}`;\n      } else {\n        console.error('Invalid category:', userCategory);\n        return;\n      }\n    } catch (error) {\n      setError(error.message);\n      console.error('Error updating post:', error);\n    }\n  };\n\n  // 추천 핸들러\n  const handleLike = async () => {\n    try {\n      // Send a request to your backend API to indicate that the post has been recommended\n      const response = await fetch(`http://localhost:8080/api/gonggamposts/${post.id}/like`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        credentials: 'include'\n      });\n\n      // Check if the recommendation was successful\n      if (response.ok) {\n        // Handle success\n        alert('포스트가 추천되었습니다.');\n      } else {\n        // Handle failure\n        alert('포스트 추천에 실패했습니다.');\n      }\n    } catch (error) {\n      // Handle error\n      console.error('Error recommending post:', error);\n      alert('오류가 발생했습니다.');\n    }\n  };\n\n  // 포스트 삭제\n  const handleDeletePost = async () => {\n    try {\n      let deleteEndpoint = '';\n      if (userCategory === '자유게시판') {\n        deleteEndpoint = `http://localhost:8080/api/jayuposts/${id}`;\n      } else if (userCategory === '공감게시판') {\n        deleteEndpoint = `http://localhost:8080/api/gonggamposts/${id}`;\n      } else if (userCategory === 'bestposts') {\n        deleteEndpoint = `http://localhost:8080/api/bestposts/${id}`;\n      } else {\n        throw new Error(`Invalid category: ${userCategory}`);\n      }\n\n      // Fetch the post to check the author\n      const postResponse = await fetch(deleteEndpoint);\n      if (!postResponse.ok) {\n        throw new Error('Failed to fetch post for verification');\n      }\n      const postData = await postResponse.json();\n      console.log(postData.userInfo.userid);\n      console.log(userId);\n      // Check if the logged-in user is the author\n      if (postData.userInfo.userAccount !== userId) {\n        alert('자신의 포스트만 삭제할 수 있습니다.');\n        return;\n      }\n\n      // Proceed with deletion if the user is the author\n      const response = await fetch(deleteEndpoint, {\n        method: 'DELETE'\n      });\n      if (response.ok) {\n        // 삭제가 성공했을 경우 알림을 띄우고 삭제를 진행\n        alert('삭제되었습니다');\n        // 삭제 후 필요한 작업 수행\n        navigate('/'); // Navigate to the home page after deletion\n      } else {\n        // 삭제가 실패했을 경우 적절한 에러 처리\n        throw new Error('Failed to delete post');\n      }\n    } catch (error) {\n      console.error('Error deleting post:', error);\n      alert('삭제 권한이 없습니다');\n    }\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 321,\n      columnNumber: 12\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 325,\n      columnNumber: 12\n    }, this);\n  }\n  if (!post) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"\\uAC8C\\uC2DC\\uBB3C\\uC744 \\uCC3E\\uC744 \\uC218 \\uC5C6\\uC2B5\\uB2C8\\uB2E4.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 329,\n      columnNumber: 12\n    }, this);\n  }\n  if (userCategory == '자유게시판') {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"post-container\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 336,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: post.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: post.content\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 338,\n        columnNumber: 11\n      }, this), post.imageUrl && /*#__PURE__*/_jsxDEV(\"img\", {\n        src: post.imageUrl,\n        alt: \"Post\",\n        className: \"post-image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"comment-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"\\uB313\\uAE00\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 344,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          value: comment,\n          onChange: e => setComment(e.target.value),\n          placeholder: \"\\uB313\\uAE00\\uC744 \\uC785\\uB825\\uD558\\uC138\\uC694\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 345,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleAddComment,\n          children: \"\\uB313\\uAE00 \\uCD94\\uAC00\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 350,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleUpdatePost,\n          children: \"\\uD3EC\\uC2A4\\uD2B8 \\uC218\\uC815\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 351,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleDeletePost,\n          children: \"\\uD3EC\\uC2A4\\uD2B8 \\uC0AD\\uC81C\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 352,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: comments.map(c => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"comment\",\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: c.user.profileImageUrl,\n              alt: \"Profile\",\n              className: \"profile-image\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 356,\n              columnNumber: 27\n            }, this), editingCommentId === c.id ? /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n                value: editingCommentContent,\n                onChange: e => setEditingCommentContent(e.target.value),\n                placeholder: \"\\uB313\\uAE00\\uC744 \\uC218\\uC815\\uD558\\uC138\\uC694\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 359,\n                columnNumber: 35\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"comment-buttons\",\n                children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"edit-button\",\n                  onClick: () => handleUpdateComment(c.id),\n                  children: \"\\uC800\\uC7A5\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 365,\n                  columnNumber: 39\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => setEditingCommentId(null),\n                  children: \"\\uCDE8\\uC18C\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 366,\n                  columnNumber: 39\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 364,\n                columnNumber: 35\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 358,\n              columnNumber: 31\n            }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: [c.content, \" \", c.user.userid]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 371,\n                columnNumber: 35\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"comment-buttons\",\n                children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"edit-button\",\n                  onClick: () => {\n                    setEditingCommentId(c.id);\n                    setEditingCommentContent(c.content);\n                  },\n                  children: \"\\uC218\\uC815\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 373,\n                  columnNumber: 39\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"delete-button\",\n                  onClick: () => handleDeleteComment(c.id),\n                  children: \"\\uC0AD\\uC81C\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 377,\n                  columnNumber: 39\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 372,\n                columnNumber: 35\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 370,\n              columnNumber: 31\n            }, this)]\n          }, c.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 355,\n            columnNumber: 23\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 353,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 335,\n      columnNumber: 7\n    }, this);\n    // \n  } else if (userCategory == '공감게시판') {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"post-container\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 391,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: post.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 392,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: post.content\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 393,\n        columnNumber: 9\n      }, this), post.imageUrl && /*#__PURE__*/_jsxDEV(\"img\", {\n        src: post.imageUrl,\n        alt: \"Post\",\n        className: \"post-image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 395,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleLike,\n        children: \"\\uCD94\\uCC9C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 399,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"comment-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"\\uB313\\uAE00\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 402,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          value: comment,\n          onChange: e => setComment(e.target.value),\n          placeholder: \"\\uB313\\uAE00\\uC744 \\uC785\\uB825\\uD558\\uC138\\uC694\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 403,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleAddComment,\n          children: \"\\uB313\\uAE00 \\uCD94\\uAC00\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 408,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleUpdatePost,\n          children: \"\\uD3EC\\uC2A4\\uD2B8 \\uC218\\uC815\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 409,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleDeletePost,\n          children: \"\\uD3EC\\uC2A4\\uD2B8 \\uC0AD\\uC81C\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 410,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: comments.map(c => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"comment\",\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: c.user.profileImageUrl,\n              alt: \"Profile\",\n              className: \"profile-image\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 414,\n              columnNumber: 17\n            }, this), editingCommentId === c.id ? /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n                value: editingCommentContent,\n                onChange: e => setEditingCommentContent(e.target.value),\n                placeholder: \"\\uB313\\uAE00\\uC744 \\uC218\\uC815\\uD558\\uC138\\uC694\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 417,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"comment-buttons\",\n                children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"edit-button\",\n                  onClick: () => handleUpdateComment(c.id),\n                  children: \"\\uC800\\uC7A5\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 423,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => setEditingCommentId(null),\n                  children: \"\\uCDE8\\uC18C\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 424,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 422,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 416,\n              columnNumber: 19\n            }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: [c.content, \" \", c.user.userid]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 429,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"comment-buttons\",\n                children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"edit-button\",\n                  onClick: () => {\n                    setEditingCommentId(c.id);\n                    setEditingCommentContent(c.content);\n                  },\n                  children: \"\\uC218\\uC815\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 431,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"delete-button\",\n                  onClick: () => handleDeleteComment(c.id),\n                  children: \"\\uC0AD\\uC81C\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 435,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 430,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 428,\n              columnNumber: 19\n            }, this)]\n          }, c.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 413,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 411,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 401,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 390,\n      columnNumber: 7\n    }, this);\n  }\n  ;\n};\n_s(PostPage, \"DE0obDamBDdW6ma/ct029SePFLk=\", false, function () {\n  return [useParams, useAuth, useNavigate];\n});\n_c = PostPage;\nexport default PostPage;\nvar _c;\n$RefreshReg$(_c, \"PostPage\");","map":{"version":3,"names":["React","useState","useEffect","useParams","useNavigate","useAuth","Header","jsxDEV","_jsxDEV","PostPage","_s","id","isLogin","userId","userCategory","navigate","post","setPost","comment","setComment","comments","setComments","loading","setLoading","error","setError","editingCommentId","setEditingCommentId","editingCommentContent","setEditingCommentContent","warning","setWarning","fetchPostAndComments","console","log","postEndpoint","Error","postResponse","fetch","ok","postData","json","message","handleAddComment","commentsEndpoint","response","method","headers","body","JSON","stringify","content","credentials","alert","newComment","handleUpdateComment","commentId","updateEndpoint","updatedComment","map","c","handleDeleteComment","deleteEndpoint","filter","handleUpdatePost","editEndpoint","userInfo","userAccount","handleLike","handleDeletePost","userid","children","fileName","_jsxFileName","lineNumber","columnNumber","className","title","imageUrl","src","alt","value","onChange","e","target","placeholder","onClick","user","profileImageUrl","_c","$RefreshReg$"],"sources":["C:/Users/user/Desktop/Real_GongGamHae_Frontend-Joonsik/Real_GongGamHae_Frontend-Joonsik/my-app/src/pages/PostPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { useAuth } from '../components/Auth/AuthContext';\n\nimport Header from '../components/common/Header';\n\nimport '../css/PostPage.css'; // CSS 파일 가져오기\n\n\nconst PostPage = () => {\n  const { id } = useParams(); // 'category' 대신 'id'만 사용\n  const { isLogin, userId, userCategory } = useAuth();\n  const navigate = useNavigate();\n  const [post, setPost] = useState(null);\n  const [comment, setComment] = useState('');\n  const [comments, setComments] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [editingCommentId, setEditingCommentId] = useState(null);\n  const [editingCommentContent, setEditingCommentContent] = useState('');\n  const [warning, setWarning] = useState('');\n\n\n\n\n  // 최포 포스트 불러오기\n  useEffect(() => {\n    const fetchPostAndComments = async () => {\n      try {\n        setLoading(true);\n        console.log(userCategory)\n        console.log(userId)\n        let postEndpoint = '';\n        if (userCategory === '자유게시판') {\n          postEndpoint = `http://localhost:8080/api/jayuposts/${id}`;\n        } else if (userCategory === '공감게시판') {\n          postEndpoint = `http://localhost:8080/api/gonggamposts/${id}`;\n        } else if (userCategory === 'bestposts') {\n          postEndpoint = `http://localhost:8080/api/bestposts/${id}`;\n        } else {\n          throw new Error(`Invalid category: ${userCategory}`);\n        }\n  \n        const postResponse = await fetch(postEndpoint);\n        if (!postResponse.ok) {\n          throw new Error('Failed to fetch post');\n        }\n        const postData = await postResponse.json();\n        setPost(postData);\n        setComments(postData.comments);\n  \n      } catch (error) {\n        console.error('Error fetching post and comments:', error);\n        setError(error.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n  \n    fetchPostAndComments();\n  }, [id, userCategory]);\n  \n  \n  // 댓글 작성\n  const handleAddComment = async () => {\n    if (!comment) {\n      setError('댓글 내용을 입력해주세요.');\n      return;\n    }\n    try {\n      let commentsEndpoint = '';\n      if (userCategory === '자유게시판') {\n        commentsEndpoint = `http://localhost:8080/api/jayucomments/${id}`;\n      } else if (userCategory === '공감게시판') {\n        commentsEndpoint = `http://localhost:8080/api/gonggamcomments/${id}`;\n      } else if (userCategory === 'bestposts') {\n        commentsEndpoint = `http://localhost:8080/api/bestcomments/${id}`;\n      } else {\n        throw new Error(`Invalid category: ${userCategory}`);\n      }\n      const response = await fetch(commentsEndpoint, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ content: comment }),\n        credentials: 'include',\n      });\n\n      if (!response.ok) {\n        alert(\"권한이 없습니다.\")\n        return \n      }\n\n      const newComment = await response.json();\n      setComments([...comments, newComment]);\n      setComment('');\n    } catch (error) {\n      console.error('Error adding comment:', error);\n      setError(error.message);\n    }\n  };\n\n  const handleUpdateComment = async (commentId) => {\n    if (!editingCommentContent) {\n      setError('댓글 내용을 입력해주세요.');\n      return;\n    }\n    try {\n      let updateEndpoint = '';\n      if (userCategory === '자유게시판') {\n        updateEndpoint = `http://localhost:8080/api/jayucomments/${id}/${commentId}`;\n      } else if (userCategory === '공감게시판') {\n        updateEndpoint = `http://localhost:8080/api/gonggamcomments/${id}/${commentId}`;\n      } else if (userCategory === 'bestposts') {\n        updateEndpoint = `http://localhost:8080/api/bestcomments/${id}/${commentId}`;\n      } else {\n        throw new Error(`Invalid category: ${userCategory}`);\n      }\n\n      const response = await fetch(updateEndpoint, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ content: editingCommentContent }),\n        credentials: 'include',\n      });\n\n\n      if (!response.ok) {\n        alert(\"권한이 없습니다.\")\n        return \n      }\n\n      const updatedComment = await response.json();\n      setComments(comments.map((c) => (c.id === commentId ? updatedComment : c)));\n      setEditingCommentId(null);\n      setEditingCommentContent('');\n    } catch (error) {\n      console.error('Error updating comment:', error);\n      setError(error.message);\n    }\n  };\n\n  const handleDeleteComment = async (commentId) => {\n    try {\n      let deleteEndpoint = '';\n      if (userCategory === '자유게시판') {\n        deleteEndpoint = `http://localhost:8080/api/jayucomments/${id}/${commentId}`;\n      } else if (userCategory === '공감게시판') {\n        deleteEndpoint = `http://localhost:8080/api/gonggamcomments/${id}/${commentId}`;\n      } else if (userCategory === 'bestposts') {\n        deleteEndpoint = `http://localhost:8080/api/bestcomments/${id}/${commentId}`;\n      } else {\n        throw new Error(`Invalid category: ${userCategory}`);\n      }\n\n      const response = await fetch(deleteEndpoint, {\n        method: 'DELETE',\n        credentials: 'include',\n      });\n\n      if (!response.ok) {\n        alert(\"권한이 없습니다.\")\n        return \n      }\n\n\n      setComments(comments.filter((c) => c.id !== commentId));\n    } catch (error) {\n      console.error('Error deleting comment:', error);\n      setError(error.message);\n    }\n  };\n\n\n\n\n\n  // 포스트 수정\n  const handleUpdatePost = async () => {\n    try {\n        let editEndpoint = '';\n        if (userCategory === '자유게시판') {\n            editEndpoint = `http://localhost:8080/api/jayuposts/${id}`;\n        } else if (userCategory === '공감게시판') {\n            editEndpoint = `http://localhost:8080/api/gonggamposts/${id}`;\n        } else if (userCategory === 'BEST') {\n            editEndpoint = `/api/bestposts/${id}`;\n        } else {\n            console.error('Invalid category:', userCategory);\n            return;\n        }\n\n        const response = await fetch(editEndpoint, {\n            method: 'GET',\n            credentials: 'include',\n            headers: {\n                'Accept': 'application/json'\n            }\n        });\n\n        if (!response.ok) {\n            throw new Error('Failed to fetch post for verification');\n        }\n\n        console.log(editEndpoint)\n        const postData = await response.json();\n        console.log(postData)\n        console.log(userId)\n\n        // Check if the logged-in user is the author\n        if (postData.userInfo.userAccount !== userId) {\n            alert(\"수정 권한이 없습니다.\");\n            return;\n        }\n\n        // Navigate to the edit page\n        if (userCategory === '자유게시판') {\n          navigate(`/postWritePage/jayupost/${id}`);\n        } else if (userCategory === '공감게시판') {\n          navigate(`/postWritePage/gonggampost/${id}`);\n        } else if (userCategory === 'BEST') {\n            editEndpoint = `/api/bestposts/${id}`;\n        } else {\n            console.error('Invalid category:', userCategory);\n            return;\n        }\n        \n\n    } catch (error) {\n        setError(error.message);\n        console.error('Error updating post:', error);\n    }\n};\n\n\n\n\n// 추천 핸들러\nconst handleLike = async () => {\n  try {\n    // Send a request to your backend API to indicate that the post has been recommended\n    const response = await fetch(`http://localhost:8080/api/gonggamposts/${post.id}/like`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      credentials: 'include',\n    });\n\n    // Check if the recommendation was successful\n    if (response.ok) {\n      // Handle success\n      alert('포스트가 추천되었습니다.');\n    } else {\n      // Handle failure\n      alert('포스트 추천에 실패했습니다.');\n    }\n  } catch (error) {\n    // Handle error\n    console.error('Error recommending post:', error);\n    alert('오류가 발생했습니다.');\n  }\n};\n\n\n\n// 포스트 삭제\n  const handleDeletePost = async () => {\n    try {\n        let deleteEndpoint = '';\n        if (userCategory === '자유게시판') {\n            deleteEndpoint = `http://localhost:8080/api/jayuposts/${id}`;\n        } else if (userCategory === '공감게시판') {\n            deleteEndpoint = `http://localhost:8080/api/gonggamposts/${id}`;\n        } else if (userCategory === 'bestposts') {\n            deleteEndpoint = `http://localhost:8080/api/bestposts/${id}`;\n        } else {\n            throw new Error(`Invalid category: ${userCategory}`);\n        }\n\n        // Fetch the post to check the author\n        const postResponse = await fetch(deleteEndpoint);\n        if (!postResponse.ok) {\n            throw new Error('Failed to fetch post for verification');\n        }\n        const postData = await postResponse.json();\n\n        console.log(postData.userInfo.userid)\n        console.log(userId)\n        // Check if the logged-in user is the author\n        if (postData.userInfo.userAccount !== userId) {\n            alert('자신의 포스트만 삭제할 수 있습니다.');\n            return;\n        }\n\n        // Proceed with deletion if the user is the author\n        const response = await fetch(deleteEndpoint, {\n            method: 'DELETE',\n        });\n\n        if (response.ok) {\n            // 삭제가 성공했을 경우 알림을 띄우고 삭제를 진행\n            alert('삭제되었습니다');\n            // 삭제 후 필요한 작업 수행\n            navigate('/'); // Navigate to the home page after deletion\n        } else {\n            // 삭제가 실패했을 경우 적절한 에러 처리\n            throw new Error('Failed to delete post');\n        }\n    } catch (error) {\n        console.error('Error deleting post:', error);\n        alert('삭제 권한이 없습니다');\n    }\n  };\n\n\n  if (loading) {\n    return <div>Loading...</div>;\n  }\n\n  if (error) {\n    return <div>Error: {error}</div>;\n  }\n\n  if (!post) {\n    return <div>게시물을 찾을 수 없습니다.</div>;\n  }\n\n\n  if (userCategory == '자유게시판') {\n    return (\n      <div className=\"post-container\">\n          <Header />\n          <h1>{post.title}</h1>\n          <p>{post.content}</p>\n          {post.imageUrl && (\n          <img src={post.imageUrl} alt=\"Post\" className=\"post-image\" />\n          )}\n\n          <div className=\"comment-container\">\n              <h2>댓글</h2>\n              <textarea\n                  value={comment}\n                  onChange={(e) => setComment(e.target.value)}\n                  placeholder=\"댓글을 입력하세요\"\n              ></textarea>\n              <button onClick={handleAddComment}>댓글 추가</button>\n              <button onClick={handleUpdatePost}>포스트 수정</button>\n              <button onClick={handleDeletePost}>포스트 삭제</button>\n              <div>\n                  {comments.map((c) => (\n                      <div key={c.id} className=\"comment\">\n                          <img src={c.user.profileImageUrl} alt=\"Profile\" className=\"profile-image\" />\n                          {editingCommentId === c.id ? (\n                              <div>\n                                  <textarea\n                                      value={editingCommentContent}\n                                      onChange={(e) => setEditingCommentContent(e.target.value)}\n                                      placeholder=\"댓글을 수정하세요\"\n                                  ></textarea>\n                                  <div className=\"comment-buttons\">\n                                      <button className=\"edit-button\" onClick={() => handleUpdateComment(c.id)}>저장</button>\n                                      <button onClick={() => setEditingCommentId(null)}>취소</button>\n                                  </div>\n                              </div>\n                          ) : (\n                              <div>\n                                  <p>{c.content} {c.user.userid}</p>\n                                  <div className=\"comment-buttons\">\n                                      <button className=\"edit-button\" onClick={() => {\n                                          setEditingCommentId(c.id);\n                                          setEditingCommentContent(c.content);\n                                      }}>수정</button>\n                                      <button className=\"delete-button\" onClick={() => handleDeleteComment(c.id)}>삭제</button>\n                                  </div>\n                              </div>\n                          )}\n                      </div>\n                  ))}\n              </div>\n          </div>\n      </div>\n    );\n    // \n  } else if (userCategory == '공감게시판') {\n    return (\n      <div className=\"post-container\">\n        <Header />\n        <h1>{post.title}</h1>\n        <p>{post.content}</p>\n        {post.imageUrl && (\n          <img src={post.imageUrl} alt=\"Post\" className=\"post-image\" />\n        )}\n    \n        {/* Recommendation button */}\n        <button onClick={handleLike}>추천</button>\n    \n        <div className=\"comment-container\">\n          <h2>댓글</h2>\n          <textarea\n            value={comment}\n            onChange={(e) => setComment(e.target.value)}\n            placeholder=\"댓글을 입력하세요\"\n          ></textarea>\n          <button onClick={handleAddComment}>댓글 추가</button>\n          <button onClick={handleUpdatePost}>포스트 수정</button>\n          <button onClick={handleDeletePost}>포스트 삭제</button>\n          <div>\n            {comments.map((c) => (\n              <div key={c.id} className=\"comment\">\n                <img src={c.user.profileImageUrl} alt=\"Profile\" className=\"profile-image\" />\n                {editingCommentId === c.id ? (\n                  <div>\n                    <textarea\n                      value={editingCommentContent}\n                      onChange={(e) => setEditingCommentContent(e.target.value)}\n                      placeholder=\"댓글을 수정하세요\"\n                    ></textarea>\n                    <div className=\"comment-buttons\">\n                      <button className=\"edit-button\" onClick={() => handleUpdateComment(c.id)}>저장</button>\n                      <button onClick={() => setEditingCommentId(null)}>취소</button>\n                    </div>\n                  </div>\n                ) : (\n                  <div>\n                    <p>{c.content} {c.user.userid}</p>\n                    <div className=\"comment-buttons\">\n                      <button className=\"edit-button\" onClick={() => {\n                        setEditingCommentId(c.id);\n                        setEditingCommentContent(c.content);\n                      }}>수정</button>\n                      <button className=\"delete-button\" onClick={() => handleDeleteComment(c.id)}>삭제</button>\n                    </div>\n                  </div>\n                )}\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );    \n  };\n}\n\n\nexport default PostPage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}